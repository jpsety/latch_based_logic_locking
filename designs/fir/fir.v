/*------------------------------------------------------------------------------
 * This code was generated by Spiral FIR Filter Generator, www.spiral.net
 * Copyright (c) 2006, Carnegie Mellon University
 * All rights reserved.
 * The code is distributed under a BSD style license
 * (see http://www.opensource.org/licenses/bsd-license.php)
 *------------------------------------------------------------------------------ */
/* ./firGen.pl 0 0 0 3 15 45 106 197 296 362 362 296 197 106 45 15 3 0 0 0 -moduleName acm_filter -fractionalBits 8 -bitWidth 32 -inData inData -inReg -outReg -outData outData -clk clk -reset reset -reset_edge negedge -filterForm 1 -outFile ../outputs/filter_1527114531.v */
/* Warning: zero-valued filter taps have been optimized away. */

module acm_filter_MultiplyBlock (
    X,
    Y1,
    Y2,
    Y3,
    Y4,
    Y5,
    Y6,
    Y7,
    Y8,
    Y9,
    Y10,
    Y11,
    Y12,
    Y13,
    Y14,
    Y15,
    Y16,
    Y17
);

  // Port mode declarations:
  input signed   [31:0] X;
  output signed  [31:0]
    Y1,
    Y2,
    Y3,
    Y4,
    Y5,
    Y6,
    Y7,
    Y8,
    Y9,
    Y10,
    Y11,
    Y12,
    Y13,
    Y14,
    Y15,
    Y16,
    Y17;

  wire [31:0] Y [0:16];

  assign Y1 = Y[0];
  assign Y2 = Y[1];
  assign Y3 = Y[2];
  assign Y4 = Y[3];
  assign Y5 = Y[4];
  assign Y6 = Y[5];
  assign Y7 = Y[6];
  assign Y8 = Y[7];
  assign Y9 = Y[8];
  assign Y10 = Y[9];
  assign Y11 = Y[10];
  assign Y12 = Y[11];
  assign Y13 = Y[12];
  assign Y14 = Y[13];
  assign Y15 = Y[14];
  assign Y16 = Y[15];
  assign Y17 = Y[16];

  //Multipliers:

  wire signed [39:0]
    w1,
    w0,
    w4,
    w3,
    w16,
    w15,
    w48,
    w45,
    w8,
    w37,
    w53,
    w180,
    w181,
    w197,
    w106,
    w296,
    w362;

  assign w1 = X;
  assign w0 = 0;
  assign w106 = w53 << 1;
  assign w15 = w16 - w1;
  assign w16 = w1 << 4;
  assign w180 = w45 << 2;
  assign w181 = w1 + w180;
  assign w197 = w181 + w16;
  assign w296 = w37 << 3;
  assign w3 = w4 - w1;
  assign w362 = w181 << 1;
  assign w37 = w45 - w8;
  assign w4 = w1 << 2;
  assign w45 = w48 - w3;
  assign w48 = w3 << 4;
  assign w53 = w45 + w8;
  assign w8 = w1 << 3;

  assign Y[0] = w3[39:8];
  assign Y[1] = w15[39:8];
  assign Y[2] = w45[39:8];
  assign Y[3] = w106[39:8];
  assign Y[4] = w197[39:8];
  assign Y[5] = w296[39:8];
  assign Y[6] = w362[39:8];
  assign Y[7] = w362[39:8];
  assign Y[8] = w296[39:8];
  assign Y[9] = w197[39:8];
  assign Y[10] = w106[39:8];
  assign Y[11] = w45[39:8];
  assign Y[12] = w15[39:8];
  assign Y[13] = w3[39:8];
  assign Y[14] = w0[39:8];
  assign Y[15] = w0[39:8];
  assign Y[16] = w0[39:8];

  //acm_filter_MultiplyBlock area estimate = 17280.6478869868;
endmodule //acm_filter_MultiplyBlock




module fir (
    inData,
    clk,
    outData,
    rst
);

  // Port mode declarations:
  input   [31:0] inData;
  input    clk;
  output  [31:0] outData;
  input    rst;

	wire reset;
	assign reset=~rst;
  //registerIn
  reg [31:0] inData_in;

  always@(posedge clk) begin
    if(~reset) begin
      inData_in <= 32'h00000000;
    end  else begin
      inData_in <= inData;
    end
  end

  //registerOut
  reg [31:0] outData;
  wire [31:0] outData_in;

  always@(posedge clk) begin
    if(~reset) begin
      outData <= 32'h00000000;
    end  else begin
      outData <= outData_in;
    end
  end

  wire [31:0] multProducts [0:16];

  acm_filter_MultiplyBlock my_acm_filter_MultiplyBlock(
    .X(inData_in),
    .Y1(multProducts[0]),
    .Y2(multProducts[1]),
    .Y3(multProducts[2]),
    .Y4(multProducts[3]),
    .Y5(multProducts[4]),
    .Y6(multProducts[5]),
    .Y7(multProducts[6]),
    .Y8(multProducts[7]),
    .Y9(multProducts[8]),
    .Y10(multProducts[9]),
    .Y11(multProducts[10]),
    .Y12(multProducts[11]),
    .Y13(multProducts[12]),
    .Y14(multProducts[13]),
    .Y15(multProducts[14]),
    .Y16(multProducts[15]),
    .Y17(multProducts[16])
  );

  reg [31:0] firStep[0:15];

  always@(posedge clk) begin
    if(~reset) begin
      firStep[0] <= 32'h00000000;
      firStep[1] <= 32'h00000000;
      firStep[2] <= 32'h00000000;
      firStep[3] <= 32'h00000000;
      firStep[4] <= 32'h00000000;
      firStep[5] <= 32'h00000000;
      firStep[6] <= 32'h00000000;
      firStep[7] <= 32'h00000000;
      firStep[8] <= 32'h00000000;
      firStep[9] <= 32'h00000000;
      firStep[10] <= 32'h00000000;
      firStep[11] <= 32'h00000000;
      firStep[12] <= 32'h00000000;
      firStep[13] <= 32'h00000000;
      firStep[14] <= 32'h00000000;
      firStep[15] <= 32'h00000000;
    end
    else begin
      firStep[0] <=  multProducts[0];
      firStep[1] <=  firStep[0] + multProducts[1];
      firStep[2] <=  firStep[1] + multProducts[2];
      firStep[3] <=  firStep[2] + multProducts[3];
      firStep[4] <=  firStep[3] + multProducts[4];
      firStep[5] <=  firStep[4] + multProducts[5];
      firStep[6] <=  firStep[5] + multProducts[6];
      firStep[7] <=  firStep[6] + multProducts[7];
      firStep[8] <=  firStep[7] + multProducts[8];
      firStep[9] <=  firStep[8] + multProducts[9];
      firStep[10] <=  firStep[9] + multProducts[10];
      firStep[11] <=  firStep[10] + multProducts[11];
      firStep[12] <=  firStep[11] + multProducts[12];
      firStep[13] <=  firStep[12] + multProducts[13];
      firStep[14] <=  firStep[13] + multProducts[14];
      firStep[15] <=  firStep[14] + multProducts[15];
    end
  end

  assign outData_in = firStep[15]+ multProducts[16];
  //acm_filter area estimate = 89889.3090832838;
endmodule //acm_filter

